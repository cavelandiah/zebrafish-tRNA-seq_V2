configfile: "config/config.yaml"

# workdir: "path/to/workdir"
# conda: "envs/mapping.yaml"
# snakemake --use-conda -n results/mapped/A.sorted.bam

import pandas as pd

samples_df = pd.read_csv(config["samples_tsv"], sep="\t")
sample_name_dict = samples_df.drop_duplicates(subset='timepoint').set_index('timepoint').to_dict(orient="index")
SAMPLES = samples_df["fastq"].to_list()
no_bs_df = samples_df[samples_df["treatment"] != "BS"]
no_bs_samples = no_bs_df["fastq"].to_list()
bs_samples_df = samples_df[samples_df["treatment"] == "BS"]
BS_SAMPLES = bs_samples_df["fastq"].to_list()
dm_samples_df = samples_df[samples_df["treatment"] == "DM"]
dm_samples = dm_samples_df["fastq"].to_list()
mock_samples_df = samples_df[samples_df["treatment"] == "DM"]
mock_samples = dm_samples_df["fastq"].to_list()
samples_df.set_index("fastq", inplace=True)
sample_dict = samples_df.to_dict(orient="index")
samples_per_treatment = {'DM': dm_samples, 'MOCK': mock_samples, 'BS': BS_SAMPLES }


PROBES = pd.read_csv(config["probes_tsv"], sep="\t")["id"].to_list()
probes_dict = (
    pd.read_csv(config["probes_tsv"], sep="\t")
    .set_index("id")
    .to_dict(orient="index")
)

wildcard_constraints:
    sample="[A-Za-z0-9]+",
    treatment = "[A-Z]+",
    m_cutoff ="[0-9]+",
    e_cutoff ="[0-9]",
    min_cov = "[0-9]+",
    mismatch_type = "[A-Za-z5]+"

# ploting paramters
CM = 1 / 2.54
font = {"family": "normal", "weight": "normal", "size": 7}

# utility functions
def anticodonfamily_from_rname(rname):
    """Get anticodon family from fasta heade of refernce.

    Needs to be adjusted to naming scheme of reference fasta file.
    """
    aa = rname.split("(")[1].strip(")")
    aa = aa.replace(")[N]", "")
    aa = aa.replace(")[B]", "")
    aa = aa.replace(")[H]", "")
    return aa

# rules

# include: "rules/utils.smk"
include: "rules/ref_genome.smk"
include: "rules/alignments.smk"
include: "rules/preprocessing_reads.smk"
include: "rules/pre-mapping.smk"
include: "rules/mapping.smk"
include: "rules/filter_mappings.smk"
include: "rules/multimappers.smk"
include: "rules/clustering.smk"
include: "rules/abundance_plots.smk"
include: "rules/coverage.smk"
include: "rules/coverage_plots.smk"
include: "rules/modifications.smk"
# include: "rules/probes_scan.smk"

rule run_all:
    input:
        'results/qc/mapping-summary.pdf',
        'results/qc/cluster/editdist_hist.pdf',
        'results/qc/cluster/pre-filter_'+config['reads_filter']+'/'+config['ref_set']+'/dist_multimapper.pdf',
        'resources/references/alignment/selected_tRNAs.fa',
        'resources/references/alignment/selected_tRNAs.fa_sorted.fa',
        'results/modifications/get_DM_all_plots',
        'results/modifications/get_MOCK_all_plots',
        'results/modifications/get_all_m5C_calls_plots',
        'results/multimappers/pre-filter_'+config['reads_filter']+'/'+config['ref_set']+'/multimapper.pdf',
        'results/multimappers/pre-filter_'+config['reads_filter']+'/'+config['ref_set']+'/cluster-editdist-4/DM/multimappers_between_clusters.pdf',
        'results/multimappers/pre-filter_'+config['reads_filter']+'/'+config['ref_set']+'/cluster-editdist-3/DM/multimappers_between_clusters.pdf',
        'results/multimappers/pre-filter_'+config['reads_filter']+'/'+config['ref_set']+'/cluster-editdist-4/MOCK/multimappers_between_clusters.pdf',
        'results/multimappers/pre-filter_'+config['reads_filter']+'/'+config['ref_set']+'/cluster-editdist-3/MOCK/multimappers_between_clusters.pdf',
        'results/multimappers/pre-filter_'+config['reads_filter']+'/'+config['ref_set']+'/cluster-editdist-4/BS/multimappers_between_clusters.pdf',
        'results/multimappers/pre-filter_'+config['reads_filter']+'/'+config['ref_set']+'/cluster-editdist-3/BS/multimappers_between_clusters.pdf',
        'results/coverage_plots/done.txt',
        'results/abundance/done.txt',
    output:
        'results/all.txt'
    run:
        with open(str(output),'w') as file:
            for f in input:
                file.write(f+'\n')
